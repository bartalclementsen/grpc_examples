@page "/"
@using Grpc.Core
@using Grpc.Net.Client
@using Grpc.Net.Client.Web
@using GrpcExamples.Server
@using System.Collections.ObjectModel
@using System.Diagnostics

<div>
    <span>Address</span>
    <input type="text" @bind-value="address" />
</div>

<div>
    <span>Name</span>
    <input type="text" @bind-value="name" />
</div>

<div>
    <span>Age</span>
    <input type="text" @bind-value="age" />
</div>

<button @onclick="Connect">Connect</button>
<button @onclick="SendAsync">Send</button>
<h1>Lines</h1>
<div>
    @foreach (var line in lines)
    {
        <div>@line</div>
    }
</div>

@code {
    private string address = "https://localhost:7044";
    private string? name;
    private int age;

    private ObservableCollection<string> lines = new ObservableCollection<string>();

    private AsyncServerStreamingCall<HelloReply>? stream;
    private Task? listeningTask;
    private Greeter.GreeterClient? client;

    private async void SendAsync()
    {
        Stopwatch sw = Stopwatch.StartNew();
        try
        {
            Log($"Calling server with name {name}");

            await client.SayHelloAsync(new HelloRequest
                {
                    Name = name,
                    Age = age,
                    Advanced = new HelloRequestAdvanced
                    {
                        From = name,
                        To = "Someone",
                        Message = $"I am age {age}"
                    }
                });
        }
        catch (Exception ex)
        {
            Log("Error: " + ex.ToString());
        }
        finally
        {
            Log($"Duration {sw.ElapsedMilliseconds}ms");
        }
    }

    private void Connect()
    {
        Log($"Connecting to {address}");

        var httpClient = new HttpClient(new GrpcWebHandler(GrpcWebMode.GrpcWeb, new HttpClientHandler()));
        var channel = GrpcChannel.ForAddress(address, new GrpcChannelOptions { HttpClient = httpClient });
        client = new Greeter.GreeterClient(channel);
        stream = client.SayHelloStream2(new SayHelloStream2Request());
        listeningTask = Task.Run(async () =>
        {
            while (await stream.ResponseStream.MoveNext())
            {
                var result = stream.ResponseStream.Current;
                await InvokeAsync(() => Log(System.Text.Json.JsonSerializer.Serialize(result)));
            }
        });
    }

    private void Log(object o)
    {
        lines.Add($"{DateTime.Now:HH:mm:ss:fff} | {o ?? "NULL"} {Environment.NewLine}");
        StateHasChanged();
    }
}